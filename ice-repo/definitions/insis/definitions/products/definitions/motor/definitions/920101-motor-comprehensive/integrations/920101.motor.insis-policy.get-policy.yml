integration:
  exchange: {}
  transformation:
    DefaultTransformationRule:
      additional: insis
      dateFormat: YYYY-MM-DD
      dateTimeFormat: 'YYYY-MM-DDThh:mm:ss'
      extends: motor.insis-policy.get-policy
      out: {}
      in:
        - fromIdx:
            array: payload.Policy.InsuranceConditions.Questionary.Question
            condition: ID == '10000'
          mappings:
            - element: policy.contract.question.previous-mtpl-insurer
              payload: 'Policy.InsuranceConditions.Questionary.Question[n].Answer'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~entity-type
              payload: Policy.Insureds.Insured[n].InsuredEntity.ObjectType
            - element: policy.insured.vehicle-objects~cover.mtpl.active
              value: false
            - element: policy.insured.vehicle-objects~cover.owndamage.active
              value: false
            - element: policy.insured.vehicle-objects~cover.pa.active
              value: false
            - element: policy.insured.vehicle-objects~cover.road_assis.active
              value: false
            - element: policy.insured.vehicle-objects~cover.vandalism.active
              value: false
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: InsuredEntity.OCar.CustomProperties.CustomProperty
              condition: FieldName == 'OCP2'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~car.transportation-of-hazardous-goods
              payload: 'Policy.Insureds.Insured[n].InsuredEntity.OCar.CustomProperties.CustomProperty[n].Value'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment
              condition: EquipmentType == 1001
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~car.additional-equipment
              value: true
            - element: policy.insured.vehicle-objects~car.additional-equipment-car-audio-included
              value: true
            - element: policy.insured.vehicle-objects~car.additional-equipment-car-audio-parent-id
              payload: Policy.Insureds.Insured[n].InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment[n].ParentObjectID
            - element: policy.insured.vehicle-objects~car.additional-equipment-car-audio
              payload: Policy.Insureds.Insured[n].InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment[n].AvValue
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment
              condition: EquipmentType == '1002'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~car.additional-equipment
              value: true
            - element: policy.insured.vehicle-objects~car.additional-equipment-alloy-wheels-included
              value: true
            - element: policy.insured.vehicle-objects~car.additional-equipment-alloy-wheels-parent-id
              payload: Policy.Insureds.Insured[n].InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment[n].ParentObjectID
            - element: policy.insured.vehicle-objects~car.additional-equipment-alloy-wheels
              payload: Policy.Insureds.Insured[n].InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment[n].AvValue
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment
              condition: EquipmentType == '1003'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~car.additional-equipment
              value: true
            - element: policy.insured.vehicle-objects~car.additional-equipment-other-included
              value: true
            - element: policy.insured.vehicle-objects~car.additional-equipment-other-parent-id
              payload: Policy.Insureds.Insured[n].InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment[n].ParentObjectID
            - element: policy.insured.vehicle-objects~car.additional-equipment-other
              payload: Policy.Insureds.Insured[n].InsuredEntity.OCar.SupplementaryEquipment.OAdditionalEquipment[n].AvValue
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'MTPL'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.mtpl.active
              value: true
            - element: policy.insured.vehicle-objects~cover.mtpl.grc-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].GrcID'
            - element: policy.insured.vehicle-objects~cover.mtpl.annex-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].AnnexID'
            - element: policy.insured.vehicle-objects~cover.mtpl.code
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].CoverCode'
            - element: policy.insured.vehicle-objects~cover.mtpl.currency
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Currency'
            - element: policy.insured.vehicle-objects~cover.mtpl.insured-amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].InsuredAmount'
            - element: policy.insured.vehicle-objects~cover.mtpl.premium
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Premium.TotalAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'OWNDAMAGE'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.owndamage.active
              value: true
            - element: policy.insured.vehicle-objects~cover.owndamage.grc-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].GrcID'
            - element: policy.insured.vehicle-objects~cover.owndamage.annex-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].AnnexID'
            - element: policy.insured.vehicle-objects~cover.owndamage.code
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].CoverCode'
            - element: policy.insured.vehicle-objects~cover.owndamage.currency
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Currency'
            - element: policy.insured.vehicle-objects~cover.owndamage.insured-amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].InsuredAmount'
            - element: policy.insured.vehicle-objects~cover.owndamage.premium
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Premium.TotalAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'PA'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.pa.active
              value: true
            - element: policy.insured.vehicle-objects~cover.pa.grc-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].GrcID'
            - element: policy.insured.vehicle-objects~cover.pa.annex-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].AnnexID'
            - element: policy.insured.vehicle-objects~cover.pa.code
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].CoverCode'
            - element: policy.insured.vehicle-objects~cover.pa.currency
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Currency'
            - element: policy.insured.vehicle-objects~cover.pa.insured-amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].InsuredAmount'
            - element: policy.insured.vehicle-objects~cover.pa.premium
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Premium.TotalAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'ROAD_ASSIS'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.road_assis.active
              value: true
            - element: policy.insured.vehicle-objects~cover.road_assis.grc-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].GrcID'
            - element: policy.insured.vehicle-objects~cover.road_assis.annex-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].AnnexID'
            - element: policy.insured.vehicle-objects~cover.road_assis.code
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].CoverCode'
            - element: policy.insured.vehicle-objects~cover.road_assis.currency
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Currency'
            - element: policy.insured.vehicle-objects~cover.road_assis.insured-amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].InsuredAmount'
            - element: policy.insured.vehicle-objects~cover.road_assis.premium
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Premium.TotalAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'VANDALISM'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.vandalism.active
              value: true
            - element: policy.insured.vehicle-objects~cover.vandalism.grc-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].GrcID'
            - element: policy.insured.vehicle-objects~cover.vandalism.annex-id
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].AnnexID'
            - element: policy.insured.vehicle-objects~cover.vandalism.code
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].CoverCode'
            - element: policy.insured.vehicle-objects~cover.vandalism.currency
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Currency'
            - element: policy.insured.vehicle-objects~cover.vandalism.insured-amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].InsuredAmount'
            - element: policy.insured.vehicle-objects~cover.vandalism.premium
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Premium.TotalAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'MTPL'
              fromIdx:
                array: Taxes.Tax
            toIdx:
              array: datamodel.policy.insured.vehicle-objects
              useSourceIndex: true
              toIdx:
                array: cover.mtpl.taxes
                append: true
            mappings:
              - element: policy.insured.vehicle-objects~cover.mtpl.taxes~type
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxType'
              - element: policy.insured.vehicle-objects~cover.mtpl.taxes~amount
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'OWNDAMAGE'
              fromIdx:
                array: Taxes.Tax
            toIdx:
              array: datamodel.policy.insured.vehicle-objects
              useSourceIndex: true
              toIdx:
                array: cover.mtpl.taxes
                append: true
            mappings:
              - element: policy.insured.vehicle-objects~cover.owndamage.taxes~type
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxType'
              - element: policy.insured.vehicle-objects~cover.owndamage.taxes~amount
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'PA'
              fromIdx:
                array: Taxes.Tax
            toIdx:
              array: datamodel.policy.insured.vehicle-objects
              useSourceIndex: true
              toIdx:
                array: cover.pa.taxes
                append: true
            mappings:
              - element: policy.insured.vehicle-objects~cover.pa.taxes~type
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxType'
              - element: policy.insured.vehicle-objects~cover.pa.taxes~amount
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'ROAD_ASSIS'
              fromIdx:
                array: Taxes.Tax
            toIdx:
              array: datamodel.policy.insured.vehicle-objects
              useSourceIndex: true
              toIdx:
                array: cover.road_asiss.taxes
                append: true
            mappings:
              - element: policy.insured.vehicle-objects~cover.road_assis.taxes~type
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxType'
              - element: policy.insured.vehicle-objects~cover.road_assis.taxes~amount
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'VANDALISM'
              fromIdx:
                array: Taxes.Tax
            toIdx:
              array: datamodel.policy.insured.vehicle-objects
              useSourceIndex: true
              toIdx:
                array: cover.vandalism.taxes
                append: true
            mappings:
              - element: policy.insured.vehicle-objects~cover.vandalism.taxes~type
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxType'
              - element: policy.insured.vehicle-objects~cover.vandalism.taxes~amount
                payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Taxes.Tax[n].TaxAmount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Questionary.Question
              condition: ID == '1000.1'
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~question.number-of-consecutive-years-without-claims
              payload: 'Policy.Insureds.Insured[n].Questionary.Question[n].Answer'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'MTPL'
              fromIdx:
                array: Discounts.Discount
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
            toIdx:
              array: cover.mtpl.discounts
              append: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.mtpl.discounts~type
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].DiscountType'
            - element: policy.insured.vehicle-objects~cover.mtpl.discounts~amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].LumpSumDiscount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'OWNDAMAGE'
              fromIdx:
                array: Discounts.Discount
                append: true
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
            toIdx:
              array: cover.owndamage.discounts
              append: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.owndamage.discounts~type
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].DiscountType'
            - element: policy.insured.vehicle-objects~cover.owndamage.discounts~amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].LumpSumDiscount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'PA'
              fromIdx:
                array: Discounts.Discount
                append: true
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
            toIdx:
              array: cover.pa.discounts
              append: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.pa.discounts~type
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].DiscountType'
            - element: policy.insured.vehicle-objects~cover.pa.discounts~amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].LumpSumDiscount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'ROAD_ASSIS'
              fromIdx:
                array: Discounts.Discount
                append: true
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
            toIdx:
              array: cover.road_assis.discounts
              append: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.road_assis.discounts~type
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].DiscountType'
            - element: policy.insured.vehicle-objects~cover.road_assis.discounts~amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].LumpSumDiscount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Covers.Cover
              condition: CoverCode == 'VANDALISM'
              fromIdx:
                array: Discounts.Discount
                append: true
          toIdx:
            array: datamodel.policy.insured.vehicle-objects
            useSourceIndex: true
            toIdx:
              array: cover.vandalism.discounts
              append: true
          mappings:
            - element: policy.insured.vehicle-objects~cover.vandalism.discounts~type
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].DiscountType'
            - element: policy.insured.vehicle-objects~cover.vandalism.discounts~amount
              payload: 'Policy.Insureds.Insured[n].Covers.Cover[n].Discounts.Discount[n].LumpSumDiscount'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
          toIdx:
            array: payload.Policy.Insureds.Insured
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~car.search.input
              payload: Policy.Insureds.Insured[n].InsuredEntity.OCar.RegNo
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Documents.Document
              condition: DocumentID == 'CARINVOICE'
          toIdx:
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~document.carinvoice.document-state
              payload: 'Policy.Insureds.Insured[n].Documents.Document[n].DocState'
            - element: policy.insured.vehicle-objects~document.carinvoice.document-seq
              payload: 'Policy.Insureds.Insured[n].Documents.Document[n].DocSeq'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Documents.Document
              condition: DocumentID == 'DRVLICENCE'
          toIdx:
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~document.drvlicence.document-state
              payload: 'Policy.Insureds.Insured[n].Documents.Document[n].DocState'
            - element: policy.insured.vehicle-objects~document.drvlicence.document-seq
              payload: 'Policy.Insureds.Insured[n].Documents.Document[n].DocSeq'
        - fromIdx:
            array: payload.Policy.Insureds.Insured
            fromIdx:
              array: Documents.Document
              condition: DocumentID == 'VEHCREFCER'
          toIdx:
            useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~document.vehcrefcer.document-state
              payload: 'Policy.Insureds.Insured[n].Documents.Document[n].DocState'
            - element: policy.insured.vehicle-objects~document.vehcrefcer.document-seq
              payload: 'Policy.Insureds.Insured[n].Documents.Document[n].DocSeq'
