integration:
  exchange:
    SoapCallExchangeRule:
      endpoint: insis_pam_endpoint
      securityMode: UsernamePassword
      username: 'insis-username'
      password: 'insis-password'
      ignoreNamespaces: 'insis-ignoreNamespaces'
      jsonSchema: InsisPAM
  transformation:
    DefaultTransformationRule:
      additional: insis
      dateFormat: YYYY-MM-DD
      dateTimeFormat: 'YYYY-MM-DDThh:mm:ss'
      extends: 920101.motor.insis-policy.save
      in: {}
      out:
        - mappings:
            - param: soapAction
              value: registerApplication
            - param: requestType
              value: RegsrApplRqType
            - param: responseType
              value: RegsrApplRsType
        - mappings:
            - value: null
              payload: InsuranceConditions.PolicyNo
            - value: '-2'
              payload: InsuranceConditions.PolicyState
        - fromIdx:
            array: datamodel.policy.insured.vehicle-objects
          toIdx:
            array: payload.Insureds.Insured
            useSourceIndex: true
          mappings:
            - value: null
              payload: Insureds.Insured[n].InsuredObjectID
            - value: '-1'
              payload: Insureds.Insured[n].InsuredEntity.ObjectID
        - fromIdx:
            array: datamodel.policy.insured.vehicle-objects
            condition: 1 == 1
            fromIdx:
              condition: 1 == 1
              array: drivers
          toIdx:
            array: payload.Insureds.Insured.Drivers.Driver
            useSourceIndex: true
            toIdx:
              array: Drivers.Driver
              useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~drivers~person.driver-license-nb
              payload: Insureds.Insured[n].Drivers.Driver[n].LicenseID

        - fromIdx:
            array: datamodel.policy.insured.vehicle-objects
            condition: 1 == 1
            fromIdx:
              condition: person.pid != null
              array: drivers
          toIdx:
            array: payload.Insureds.Insured.Drivers.Driver
            useSourceIndex: true
            toIdx:
              array: Drivers.Driver
              useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~drivers~person.pid
              payload: Insureds.Insured[n].Drivers.Driver[n].PID

        - fromIdx:
            array: datamodel.policy.insured.vehicle-objects
            condition: 1 == 1
            fromIdx:
              condition: person.man-id != -1 && person.pid == null
              array: drivers
          toIdx:
            array: payload.Insureds.Insured.Drivers.Driver
            useSourceIndex: true
            toIdx:
              array: Drivers.Driver
              useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~drivers~person.man-id
              payload: Insureds.Insured[n].Drivers.Driver[n].ManID

        - fromIdx:
            array: datamodel.policy.insured.vehicle-objects
            condition: 1 == 1
            fromIdx:
              condition: person.pid == null && person.man-id == -1
              array: drivers
          toIdx:
            array: payload.Insureds.Insured.Drivers.Driver
            useSourceIndex: true
            toIdx:
              array: Drivers.Driver
              useSourceIndex: true
          mappings:
            - element: policy.insured.vehicle-objects~drivers~person.first-name
              payload: Insureds.Insured[n].Drivers.Driver[n].Entity.PersonalData.Name.Given

            - element: policy.insured.vehicle-objects~drivers~person.last-name
              payload: Insureds.Insured[n].Drivers.Driver[n].Entity.PersonalData.Name.Family

            - element: policy.insured.vehicle-objects~drivers~person.date-of-birth
              payload: Insureds.Insured[n].Drivers.Driver[n].Entity.PersonalData.BirthDate

            - value: ' '
              payload: Insureds.Insured[n].Drivers.Driver[n].Entity.PersonalData.PID
