// Import bootstrap as a single file - ideally, we would import parts only and in between, override bootstrap variables
@import '../../../../node_modules/bootstrap/scss/bootstrap';

// Import fontawesome, adjust the path for finding fonts
$fa-font-path: '../../../../node_modules/font-awesome/fonts';
@import '../../../../node_modules/font-awesome/scss/font-awesome';

// Internal imports
@import 'variables';
@import 'mixins';
@import 'reset';

/**
 * TIP: We need to import the themes.scss in order to force its logic execution. Which is in fact
 * logic needed for generating Angular Material Themes.
 */
@import 'themes/themes';

/**
 * TIP: You will need to import here only the themes you plan to use inside your application.
 */
@import 'themes/defualt/default-theme';
@import 'themes/christmas/christmas-theme';

.container {
  width: 100%;
  max-width: 1328px; // 1280 max width + padding 24px
  padding: 16px;

  @include respond-from(840px) {
    padding: 24px;
  }
}


/**
 * TIP: We create here a root level CSS class which when applied on body (html tag) will
 * lead to actually apply this theme to all children of the body/root-level components.
 * You could change the actual application theme by changing this theme class.
 *
 * Examples of applying theme on body.
 * <body class="default-light-theme">...</body>
 *
 * Example fo apply theme on root application level component
 * app.component.html
 * <div class="app-root container-fluid default-light-theme">
 *     <router-outlet></router-outlet>
 * </div>
 */
.default-light-theme {
  @include all_mixins($default-light-theme);
}

.default-dark-theme {
  @include all_mixins($default-dark-theme);
}

.christmas-light-theme {
  @include all_mixins($christmas-light-theme);
}
